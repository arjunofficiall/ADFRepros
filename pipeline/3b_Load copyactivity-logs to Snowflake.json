{
	"name": "3b_Load copyactivity-logs to Snowflake",
	"properties": {
		"activities": [
			{
				"name": "Iterate through copyactivity-logs",
				"type": "GetMetadata",
				"dependsOn": [],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"dataset": {
						"referenceName": "SimioSharedStorageSimioAutomation",
						"type": "DatasetReference",
						"parameters": {
							"Directory": {
								"value": "@replace(pipeline().parameters.LogFileDirectory,'simio-automation/','')",
								"type": "Expression"
							}
						}
					},
					"fieldList": [
						"childItems"
					],
					"storeSettings": {
						"type": "AzureBlobStorageReadSettings",
						"recursive": true,
						"enablePartitionDiscovery": false
					},
					"formatSettings": {
						"type": "BinaryReadSettings"
					}
				}
			},
			{
				"name": "Upload each log file",
				"type": "ForEach",
				"dependsOn": [
					{
						"activity": "Remove existing QC entries",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('Iterate through copyactivity-logs').output.childItems",
						"type": "Expression"
					},
					"isSequential": true,
					"activities": [
						{
							"name": "Copyactivity-log to Snowflake",
							"type": "Copy",
							"dependsOn": [],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "DelimitedTextSource",
									"additionalColumns": [
										{
											"name": "FILE_ID",
											"value": {
												"value": "@pipeline().parameters.FILE_ID",
												"type": "Expression"
											}
										},
										{
											"name": "ADF Pipeline RunId",
											"value": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											}
										}
									],
									"storeSettings": {
										"type": "AzureBlobStorageReadSettings",
										"recursive": true,
										"enablePartitionDiscovery": false
									},
									"formatSettings": {
										"type": "DelimitedTextReadSettings"
									}
								},
								"sink": {
									"type": "SnowflakeSink",
									"importSettings": {
										"type": "SnowflakeImportCopyCommand"
									}
								},
								"enableStaging": true,
								"stagingSettings": {
									"linkedServiceName": {
										"referenceName": "engineeringstorage",
										"type": "LinkedServiceReference"
									},
									"path": "simio-automation/ACTA/FileIngestionLogs/stage"
								},
								"translator": {
									"type": "TabularTranslator",
									"mappings": [
										{
											"source": {
												"name": "FILE_ID",
												"type": "String"
											},
											"sink": {
												"name": "FILE_ID",
												"type": "Int64"
											}
										},
										{
											"source": {
												"type": "String",
												"ordinal": 1
											},
											"sink": {
												"name": "Message",
												"type": "String"
											}
										},
										{
											"source": {
												"name": "ADF Pipeline RunId"
											},
											"sink": {
												"name": "ADF Pipeline RunId"
											}
										}
									]
								}
							},
							"inputs": [
								{
									"referenceName": "ActaFileIngestionLogs_NoDelimiter",
									"type": "DatasetReference",
									"parameters": {
										"Directory": {
											"value": "@replace(pipeline().parameters.LogFileDirectory,'simio-automation/','')",
											"type": "Expression"
										},
										"FileName": {
											"value": "@item().name",
											"type": "Expression"
										}
									}
								}
							],
							"outputs": [
								{
									"referenceName": "simio_prod_dynamic",
									"type": "DatasetReference",
									"parameters": {
										"Environment": {
											"value": "@pipeline().globalParameters.environment",
											"type": "Expression"
										},
										"SchemaName": "QC",
										"TableName": "ACTA_INGESTION_SKIPPED_ROWS_LOG",
										"Role": "DATA_ADMIN_ROLE",
										"DatabaseName": "ACTA_DW"
									}
								}
							]
						}
					]
				}
			},
			{
				"name": "Remove existing QC entries",
				"type": "Script",
				"dependsOn": [
					{
						"activity": "Iterate through copyactivity-logs",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"linkedServiceName": {
					"referenceName": "Snowflake Simio Prod Dynamic",
					"type": "LinkedServiceReference",
					"parameters": {
						"Environment": "@pipeline().globalParameters.environment",
						"DatabaseName": "ACTA_DW"
					}
				},
				"typeProperties": {
					"scripts": [
						{
							"type": "Query",
							"text": {
								"value": "DELETE \nFROM ACTA_DW.QC.ACTA_INGESTION_SKIPPED_ROWS_LOG \nWHERE FILE_ID=@{pipeline().parameters.FILE_ID}",
								"type": "Expression"
							}
						}
					],
					"scriptBlockExecutionTimeout": "02:00:00"
				}
			},
			{
				"name": "Remove header records",
				"type": "Script",
				"dependsOn": [
					{
						"activity": "Upload each log file",
						"dependencyConditions": [
							"Completed"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"linkedServiceName": {
					"referenceName": "Snowflake Simio Prod Dynamic",
					"type": "LinkedServiceReference",
					"parameters": {
						"Environment": "@pipeline().globalParameters.environment",
						"DatabaseName": "ACTA_DW"
					}
				},
				"typeProperties": {
					"scripts": [
						{
							"type": "Query",
							"text": {
								"value": "DELETE FROM ACTA_DW.QC.ACTA_INGESTION_SKIPPED_ROWS_LOG WHERE \"Message\"='Timestamp,Level,OperationName,OperationItem,Message'",
								"type": "Expression"
							}
						}
					],
					"scriptBlockExecutionTimeout": "02:00:00"
				}
			},
			{
				"name": "UPDATE INFERRED_ERROR Field",
				"type": "Script",
				"dependsOn": [
					{
						"activity": "Remove header records",
						"dependencyConditions": [
							"Completed"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"linkedServiceName": {
					"referenceName": "Snowflake Simio Prod Dynamic",
					"type": "LinkedServiceReference",
					"parameters": {
						"Environment": "@pipeline().globalParameters.environment",
						"DatabaseName": "ACTA_DW"
					}
				},
				"typeProperties": {
					"scripts": [
						{
							"type": "Query",
							"text": {
								"value": "UPDATE ACTA_DW.QC.ACTA_INGESTION_SKIPPED_ROWS_LOG\nSET INFERRED_ERROR=\nCASE \n    WHEN \"Message\" ILIKE '%found more columns than expected column count%' THEN 'Source record has more columns than sink table structure' \n    WHEN \"Message\" ILIKE '%is too long and would be truncated%' THEN 'Source record contains field with length greater than the sink column maximum field length'\n    ELSE 'No friendly error - Please review the Message field for accurate details'\nEND\nWHERE FILE_ID=@{pipeline().parameters.FILE_ID}",
								"type": "Expression"
							}
						}
					],
					"scriptBlockExecutionTimeout": "02:00:00"
				}
			}
		],
		"parameters": {
			"FILE_ID": {
				"type": "string"
			},
			"LogFileDirectory": {
				"type": "string"
			},
			"RowsSkipped": {
				"type": "string"
			}
		},
		"folder": {
			"name": "SimioApp/FileTrack/ACTA"
		},
		"annotations": [],
		"lastPublishTime": "2024-07-30T18:44:22Z"
	},
	"type": "Microsoft.DataFactory/factories/pipelines"
}