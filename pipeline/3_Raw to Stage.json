{
	"name": "3_Raw to Stage",
	"properties": {
		"activities": [
			{
				"name": "Get Mappings for File",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "Set FILE_HEADER_KEY",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderStoredProcedureName": "[appdata].[sp_getColumnMappingByFileHeaderKey]",
						"storedProcedureParameters": {
							"file_header_key": {
								"type": "Int32",
								"value": {
									"value": "@variables('FILE_HEADER_KEY')",
									"type": "Expression"
								}
							}
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "simio_appdata_prod_ds1",
						"type": "DatasetReference",
						"parameters": {
							"TableName": "FileHeader"
						}
					},
					"firstRowOnly": true
				}
			},
			{
				"name": "Get Parameter Values",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "Get Mappings for File",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "SnowflakeSource",
						"query": {
							"value": "@concat(' \n select * from ACTA_DW.STAGE.vwGET_PIPELINE_PARAMETERS\nwhere file_id = ', string(pipeline().parameters.FileID))",
							"type": "Expression"
						},
						"exportSettings": {
							"type": "SnowflakeExportCopyCommand"
						}
					},
					"dataset": {
						"referenceName": "acta_dw_snowflake_generic1",
						"type": "DatasetReference"
					}
				}
			},
			{
				"name": "TableName",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "Get Parameter Values",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"variableName": "TableName",
					"value": {
						"value": "@activity('Get Parameter Values').output.firstRow.table_name",
						"type": "Expression"
					}
				}
			},
			{
				"name": "SchemaName",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "Get Parameter Values",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"variableName": "SchemaName",
					"value": {
						"value": "@activity('Get Parameter Values').output.firstRow.schema_name",
						"type": "Expression"
					}
				}
			},
			{
				"name": "DirectoryName",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "Get Parameter Values",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"variableName": "DirectoryName",
					"value": {
						"value": "@activity('Get Parameter Values').output.firstRow.directory_name",
						"type": "Expression"
					}
				}
			},
			{
				"name": "FileName",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "Get Parameter Values",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"variableName": "FileName",
					"value": {
						"value": "@trim(activity('Get Parameter Values').output.firstRow.file_name)",
						"type": "Expression"
					}
				}
			},
			{
				"name": "JsonMapping",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "Get Parameter Values",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"variableName": "JSONMapping",
					"value": {
						"value": "@activity('Get Mappings for File').output.firstRow.json_output",
						"type": "Expression"
					}
				}
			},
			{
				"name": "ClientID",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "Get Parameter Values",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"variableName": "ClientID",
					"value": {
						"value": "@activity('Get Parameter Values').output.firstRow.client_id",
						"type": "Expression"
					}
				}
			},
			{
				"name": "File Delimiter",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "Get Parameter Values",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"variableName": "FileDelimiter",
					"value": {
						"value": "@activity('Get Parameter Values').output.firstRow.filedelimiter",
						"type": "Expression"
					}
				}
			},
			{
				"name": "Set IS_FIXED_WIDTH",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "File Delimiter",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"variableName": "IS_FIXED_WIDTH",
					"value": {
						"value": "@not(contains(createArray('}', ',','|','\\t')  , variables('FileDelimiter')))",
						"type": "Expression"
					}
				}
			},
			{
				"name": "Append Client and FileID to JSON",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "JsonMapping",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"variableName": "AppendedJSONMapping",
					"value": {
						"value": "@replace(variables('JSONMapping'),']',',{\"source\":{\"name\":\"FILE_ID\"},\"sink\":{\"name\":\"FILE_ID\"}},{\"source\":{\"name\":\"CLIENTID\"},\"sink\":{\"name\":\"CLIENTID\"}}]')",
						"type": "Expression"
					}
				}
			},
			{
				"name": "Get File Header Key",
				"type": "Lookup",
				"dependsOn": [],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "SnowflakeSource",
						"query": {
							"value": "SELECT FILEHEADER_KEY \nFROM ACTA_DW.PUBLIC.FILETRACK\nWHERE FILE_ID =@{pipeline().parameters.FileID}",
							"type": "Expression"
						},
						"exportSettings": {
							"type": "SnowflakeExportCopyCommand"
						}
					},
					"dataset": {
						"referenceName": "ACTA_DW_Snowflake_Dynamic",
						"type": "DatasetReference"
					}
				}
			},
			{
				"name": "Set FILE_HEADER_KEY",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "Get File Header Key",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"variableName": "FILE_HEADER_KEY",
					"value": {
						"value": "@int(activity('Get File Header Key').output.firstRow.FILEHEADER_KEY)",
						"type": "Expression"
					}
				}
			},
			{
				"name": "If file is fixed width",
				"type": "IfCondition",
				"dependsOn": [
					{
						"activity": "Set IS_FIXED_WIDTH",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "ClientID",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "Append Client and FileID to JSON",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "FileName",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "DirectoryName",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "SchemaName",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "TableName",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@variables('IS_FIXED_WIDTH')",
						"type": "Expression"
					},
					"ifFalseActivities": [
						{
							"name": "Delete from Stage",
							"type": "Lookup",
							"dependsOn": [],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "SnowflakeSource",
									"query": {
										"value": "@concat('CALL ACTA_DW.STAGE.DELETE_FROM_STAGE_BEFORE_LOAD(''', variables('TableName'), ''',''',pipeline().parameters.FileID,''');')",
										"type": "Expression"
									},
									"exportSettings": {
										"type": "SnowflakeExportCopyCommand"
									}
								},
								"dataset": {
									"referenceName": "simio_prod_dynamic",
									"type": "DatasetReference",
									"parameters": {
										"Environment": {
											"value": "@pipeline().globalParameters.environment",
											"type": "Expression"
										},
										"SchemaName": "N/A",
										"TableName": "N/A",
										"Role": "DATA_ADMIN_ROLE",
										"DatabaseName": "ACTA_DW"
									}
								}
							}
						},
						{
							"name": "Write file to stage",
							"type": "Copy",
							"dependsOn": [
								{
									"activity": "Delete from Stage",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "DelimitedTextSource",
									"additionalColumns": [
										{
											"name": "CLIENTID",
											"value": {
												"value": "@variables('ClientID')",
												"type": "Expression"
											}
										},
										{
											"name": "FILE_ID",
											"value": {
												"value": "@pipeline().parameters.FileID",
												"type": "Expression"
											}
										}
									],
									"storeSettings": {
										"type": "AzureFileStorageReadSettings",
										"recursive": true,
										"enablePartitionDiscovery": false
									},
									"formatSettings": {
										"type": "DelimitedTextReadSettings"
									}
								},
								"sink": {
									"type": "SnowflakeSink",
									"preCopyScript": {
										"value": "@{concat('Delete from STAGE.', variables('TableName'), ' where file_id =', pipeline().parameters.FileID,';')}",
										"type": "Expression"
									},
									"importSettings": {
										"type": "SnowflakeImportCopyCommand",
										"additionalCopyOptions": {
											"ON_ERROR": "CONTINUE"
										}
									}
								},
								"enableStaging": true,
								"stagingSettings": {
									"linkedServiceName": {
										"referenceName": "engineeringstorage",
										"type": "LinkedServiceReference"
									},
									"path": "stage/ACTA/FileIngestionStage"
								},
								"enableSkipIncompatibleRow": true,
								"logSettings": {
									"enableCopyActivityLog": true,
									"copyActivityLogSettings": {
										"logLevel": "Warning",
										"enableReliableLogging": false
									},
									"logLocationSettings": {
										"linkedServiceName": {
											"referenceName": "engineeringstorage",
											"type": "LinkedServiceReference"
										},
										"path": "stage/ACTA/FileIngestionLogs"
									}
								},
								"translator": {
									"value": "@json(variables('AppendedJSONMapping'))",
									"type": "Expression"
								}
							},
							"inputs": [
								{
									"referenceName": "acta_dw_sftp_dynamic_delimiter",
									"type": "DatasetReference",
									"parameters": {
										"DirectoryName": {
											"value": "ACTA_DW/@{variables('DirectoryName')}",
											"type": "Expression"
										},
										"FileName": {
											"value": "@variables('FileName')",
											"type": "Expression"
										},
										"Delimiter": {
											"value": "@if(equals('\\t', variables('FileDelimiter')), base64ToString('CQ=='), variables('FileDelimiter'))  ",
											"type": "Expression"
										},
										"Quote": {
											"value": "@if(\n    or(\n    equals(variables('FileDelimiter'),'}')\n    ,equals(variables('FileDelimiter'),'|')\n    )\n    \n    ,'','\"')",
											"type": "Expression"
										}
									}
								}
							],
							"outputs": [
								{
									"referenceName": "simio_prod_dynamic",
									"type": "DatasetReference",
									"parameters": {
										"Environment": {
											"value": "@pipeline().globalParameters.environment",
											"type": "Expression"
										},
										"SchemaName": {
											"value": "@variables('SchemaName')",
											"type": "Expression"
										},
										"TableName": {
											"value": "@variables('TableName')",
											"type": "Expression"
										},
										"Role": "DATA_ADMIN_ROLE",
										"DatabaseName": "ACTA_DW"
									}
								}
							]
						},
						{
							"name": "Insert Rows Skipped",
							"type": "Script",
							"state": "Inactive",
							"onInactiveMarkAs": "Succeeded",
							"dependsOn": [
								{
									"activity": "3a Export RowsSkipped Logs",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"linkedServiceName": {
								"referenceName": "Snowflake Simio Prod Dynamic",
								"type": "LinkedServiceReference",
								"parameters": {
									"Environment": "@pipeline().globalParameters.environment",
									"DatabaseName": "ACTA_DW"
								}
							},
							"typeProperties": {
								"scripts": [
									{
										"type": "Query",
										"text": {
											"value": "INSERT INTO ACTA_DW.STAGE.CLIENT_QC_ROWS_SKIPPED\n(FILE_ID, CLIENTID, ROWS_READ, ROWS_WRITTEN, ROWS_SKIPPED, LOG_FILE)\nVALUES\n(@{pipeline().parameters.FileID}, @{variables('ClientID')}, @{activity('Write file to stage').output.rowsRead}, @{activity('Write file to stage').output.rowsCopied}, @{activity('Write file to stage').output.rowsSkipped}, '@{activity('Write file to stage').output.logFilePath}')\n\n\n",
											"type": "Expression"
										}
									}
								],
								"scriptBlockExecutionTimeout": "02:00:00"
							}
						},
						{
							"name": "3a Export RowsSkipped Logs",
							"type": "ExecutePipeline",
							"state": "Inactive",
							"onInactiveMarkAs": "Succeeded",
							"dependsOn": [
								{
									"activity": "Write file to stage",
									"dependencyConditions": [
										"Skipped"
									]
								}
							],
							"policy": {
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"pipeline": {
									"referenceName": "3a_Export RowsSkipped Logs",
									"type": "PipelineReference"
								},
								"waitOnCompletion": true,
								"parameters": {
									"RowsSkipped": {
										"value": "@activity('Write file to stage').output.rowsSkipped",
										"type": "Expression"
									},
									"FILE_ID": {
										"value": "@pipeline().parameters.FileID",
										"type": "Expression"
									},
									"LogFileDirectory": {
										"value": "@activity('Write file to stage').output.logFilePath",
										"type": "Expression"
									}
								}
							}
						},
						{
							"name": "Failed writing logs",
							"type": "Fail",
							"dependsOn": [
								{
									"activity": "3a Export RowsSkipped Logs",
									"dependencyConditions": [
										"Failed"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"message": "Failed to write logs",
								"errorCode": "500"
							}
						}
					],
					"ifTrueActivities": [
						{
							"name": "8_Delete PGP and Z Files for FWF",
							"type": "ExecutePipeline",
							"state": "Inactive",
							"onInactiveMarkAs": "Succeeded",
							"dependsOn": [],
							"policy": {
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"pipeline": {
									"referenceName": "8_Delete PGP and Z Files for FWF",
									"type": "PipelineReference"
								},
								"waitOnCompletion": true,
								"parameters": {
									"DirectoryName": {
										"value": "@variables('DirectoryName')",
										"type": "Expression"
									},
									"FileName": {
										"value": "@variables('FileName')",
										"type": "Expression"
									},
									"FileID": {
										"value": "@pipeline().parameters.FileID",
										"type": "Expression"
									}
								}
							}
						},
						{
							"name": "GET SQL STATEMENT",
							"type": "SetVariable",
							"dependsOn": [
								{
									"activity": "SQL STATEMENT",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"variableName": "SQL_STATEMENT",
								"value": {
									"value": "@activity('SQL STATEMENT').output.firstRow.SQL",
									"type": "Expression"
								}
							}
						},
						{
							"name": "Write to STAGE using SQL",
							"description": "Uses the generated SQL query to copy the data to the staging table.",
							"type": "Copy",
							"dependsOn": [
								{
									"activity": "Append Client and File ID to SQL",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "SnowflakeSource",
									"query": {
										"value": "@variables('AppendedSQL')",
										"type": "Expression"
									},
									"exportSettings": {
										"type": "SnowflakeExportCopyCommand"
									}
								},
								"sink": {
									"type": "SnowflakeSink",
									"preCopyScript": {
										"value": "@{concat('Delete from STAGE.', variables('TableName'), ' where file_id = ',pipeline().parameters.FileID,';')}",
										"type": "Expression"
									},
									"importSettings": {
										"type": "SnowflakeImportCopyCommand",
										"additionalCopyOptions": {
											"ON_ERROR": "CONTINUE"
										}
									}
								},
								"enableStaging": true,
								"stagingSettings": {
									"linkedServiceName": {
										"referenceName": "engineeringstorage",
										"type": "LinkedServiceReference"
									},
									"path": "stage/ACTA/staging"
								},
								"enableSkipIncompatibleRow": true,
								"logSettings": {
									"enableCopyActivityLog": true,
									"copyActivityLogSettings": {
										"logLevel": "Warning",
										"enableReliableLogging": false
									},
									"logLocationSettings": {
										"linkedServiceName": {
											"referenceName": "engineeringstorage",
											"type": "LinkedServiceReference"
										},
										"path": "stage/ACTA/errors"
									}
								},
								"translator": {
									"value": "@json(variables('AppendedJSONMapping'))",
									"type": "Expression"
								}
							},
							"inputs": [
								{
									"referenceName": "simio_prod_dynamic",
									"type": "DatasetReference",
									"parameters": {
										"Environment": {
											"value": "@pipeline().globalParameters.environment",
											"type": "Expression"
										},
										"SchemaName": "N/A",
										"TableName": "N/A",
										"Role": "DATA_ADMIN_ROLE",
										"DatabaseName": "ACTA_DW"
									}
								}
							],
							"outputs": [
								{
									"referenceName": "acta_dw_generic_schema_table1",
									"type": "DatasetReference",
									"parameters": {
										"SCHEMA_NAME": {
											"value": "@variables('SchemaName')",
											"type": "Expression"
										},
										"TABLE_NAME": {
											"value": "@variables('TableName')",
											"type": "Expression"
										}
									}
								}
							]
						},
						{
							"name": "Generate mappings table",
							"type": "Lookup",
							"dependsOn": [
								{
									"activity": "8_Delete PGP and Z Files for FWF",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "SnowflakeSource",
									"query": {
										"value": "@concat('call ACTA_DW.STAGE.MAPPING_STAGE(',pipeline().parameters.FileID,');')",
										"type": "Expression"
									},
									"exportSettings": {
										"type": "SnowflakeExportCopyCommand"
									}
								},
								"dataset": {
									"referenceName": "acta_dw_snowflake_generic1",
									"type": "DatasetReference"
								}
							}
						},
						{
							"name": "SQL STATEMENT",
							"type": "Lookup",
							"dependsOn": [
								{
									"activity": "Process Fixed Width File",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "SnowflakeSource",
									"query": {
										"value": "SELECT 'SELECT ' || LISTAGG(SQL_STATEMENT,',') || ' FROM ACTA_DW.STAGE.FWF_STAGE_TABLE_@{pipeline().parameters.FileID}' as SQL FROM ACTA_DW.STAGE.FWF_SQL_TO_EXECUTE_@{pipeline().parameters.FileID}",
										"type": "Expression"
									},
									"exportSettings": {
										"type": "SnowflakeExportCopyCommand"
									}
								},
								"dataset": {
									"referenceName": "simio_prod_dynamic",
									"type": "DatasetReference",
									"parameters": {
										"Environment": {
											"value": "@pipeline().globalParameters.environment",
											"type": "Expression"
										},
										"SchemaName": "N/A",
										"TableName": "N/A",
										"Role": "DATA_ADMIN_ROLE",
										"DatabaseName": "ACTA_DW"
									}
								}
							}
						},
						{
							"name": "Append Client and File ID to SQL",
							"description": "Adds the Client ID and File ID into the SQL Statement so it can be written into the STAGE table",
							"type": "SetVariable",
							"dependsOn": [
								{
									"activity": "GET SQL STATEMENT",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"variableName": "AppendedSQL",
								"value": {
									"value": "@replace(variables('SQL_STATEMENT'),concat('FROM ACTA_DW.STAGE.FWF_STAGE_TABLE_', pipeline().parameters.FileID),concat(', ',variables('ClientID'),' AS CLIENTID',', ',pipeline().parameters.FileID, ' AS FILE_ID FROM ACTA_DW.STAGE.FWF_STAGE_TABLE_', pipeline().parameters.FileID))",
									"type": "Expression"
								}
							}
						},
						{
							"name": "Process Fixed Width File",
							"type": "ExecutePipeline",
							"dependsOn": [
								{
									"activity": "Generate mappings table",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"pipeline": {
									"referenceName": "3_4 Process FWF",
									"type": "PipelineReference"
								},
								"waitOnCompletion": true,
								"parameters": {
									"FileID": {
										"value": "@pipeline().parameters.FileID",
										"type": "Expression"
									},
									"Directory": {
										"value": "@variables('DirectoryName')",
										"type": "Expression"
									},
									"FileName": {
										"value": "@variables('FileName')",
										"type": "Expression"
									},
									"AppendedJSONMapping": {
										"value": "@variables('AppendedJSONMapping')",
										"type": "Expression"
									}
								}
							}
						},
						{
							"name": "Clean up File ID tables",
							"type": "Script",
							"dependsOn": [
								{
									"activity": "Write to STAGE using SQL",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"linkedServiceName": {
								"referenceName": "Snowflake Simio Prod Dynamic",
								"type": "LinkedServiceReference",
								"parameters": {
									"Environment": "@pipeline().globalParameters.environment",
									"DatabaseName": "ACTA_DW"
								}
							},
							"typeProperties": {
								"scripts": [
									{
										"type": "Query",
										"text": {
											"value": "DROP TABLE ACTA_DW.STAGE.FWF_STAGE_TABLE_@{pipeline().parameters.FileID};\nDROP TABLE ACTA_DW.STAGE.FWF_SQL_TO_EXECUTE_@{pipeline().parameters.FileID};\nDROP TABLE ACTA_DW.STAGE.FWF_MAPPING_STAGE_@{pipeline().parameters.FileID};",
											"type": "Expression"
										}
									}
								],
								"scriptBlockExecutionTimeout": "02:00:00"
							}
						}
					]
				}
			}
		],
		"parameters": {
			"FileID": {
				"type": "string",
				"defaultValue": "25716"
			}
		},
		"variables": {
			"FileName": {
				"type": "String"
			},
			"SchemaName": {
				"type": "String"
			},
			"DirectoryName": {
				"type": "String"
			},
			"TableName": {
				"type": "String"
			},
			"JSONMapping": {
				"type": "String"
			},
			"ClientID": {
				"type": "String"
			},
			"ColumnName": {
				"type": "String"
			},
			"WEIRDDIMDONORFLAG": {
				"type": "Boolean"
			},
			"FileID_ForEach": {
				"type": "String"
			},
			"FileDelimiter": {
				"type": "String"
			},
			"NeedToDeleteArchive": {
				"type": "Boolean"
			},
			"SQL_STATEMENT": {
				"type": "String"
			},
			"IS_FIXED_WIDTH": {
				"type": "Boolean"
			},
			"boolean": {
				"type": "String"
			},
			"AppendedSQL": {
				"type": "String"
			},
			"AppendedJSONMapping": {
				"type": "String"
			},
			"FILE_HEADER_KEY": {
				"type": "Integer"
			}
		},
		"folder": {
			"name": "SimioApp/FileTrack/ACTA"
		},
		"annotations": [],
		"lastPublishTime": "2024-07-30T18:44:23Z"
	},
	"type": "Microsoft.DataFactory/factories/pipelines"
}